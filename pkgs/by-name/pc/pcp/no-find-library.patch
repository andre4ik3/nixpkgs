diff --git a/src/python/pcp/mmv.py b/src/python/pcp/mmv.py
index 57bb7e229..0d76a3717 100644
--- a/src/python/pcp/mmv.py
+++ b/src/python/pcp/mmv.py
@@ -78,7 +78,7 @@ from ctypes import Structure, POINTER
 from ctypes import c_int, c_uint, c_long, c_char, c_char_p, c_double, c_void_p
 
 # Performance Co-Pilot MMV library (C)
-LIBPCP_MMV = ctypes.CDLL(ctypes.util.find_library("pcp_mmv"))
+LIBPCP_MMV = ctypes.CDLL("@pcp_mmv@")
 
 ##############################################################################
 #
diff --git a/src/python/pcp/pmapi.py.in b/src/python/pcp/pmapi.py.in
index 488bfdf18..7de98367e 100644
--- a/src/python/pcp/pmapi.py.in
+++ b/src/python/pcp/pmapi.py.in
@@ -108,16 +108,14 @@ from ctypes import c_char, c_int, c_uint, c_long, c_char_p, c_void_p
 from ctypes import c_float, c_double, c_int32, c_uint32, c_int64, c_uint64
 from ctypes import CDLL, POINTER, CFUNCTYPE, Structure, Union
 from ctypes import addressof, pointer, sizeof, cast, byref
-from ctypes.util import find_library
 
 
 ##############################################################################
 #
 # dynamic library loads
 #
-LIBPCP = CDLL(find_library("pcp"))
-libc_name = "c" if sys.platform != "win32" else "msvcrt"
-LIBC = CDLL(find_library(libc_name))
+LIBPCP = CDLL("@pcp@")
+LIBC = CDLL("@c@")
 
 
 ##############################################################################
@@ -1612,7 +1610,9 @@ class pmContext(object):
             raise pmErr(status)
         if status > 0:
             childL = list(map(lambda x: str(offspring[x].decode()), range(status)))
+            sys.stderr.write("FREEING offspring L1613\n")
             LIBC.free(offspring)
+            sys.stderr.write("FREED offspring L1615\n")
         else:
             return None
         return childL
@@ -1635,8 +1635,12 @@ class pmContext(object):
         if status > 0:
             childL = list(map(lambda x: str(offspring[x].decode()), range(status)))
             statL = list(map(lambda x: int(childstat[x]), range(status)))
+            sys.stderr.write("FREEING offspring L1638\n")
             LIBC.free(offspring)
+            sys.stderr.write("FREED offspring L1640\n")
+            sys.stderr.write("FREEING childstat L1641\n")
             LIBC.free(childstat)
+            sys.stderr.write("FREED childstat L1643\n")
         else:
             return None, None
         return childL, statL
@@ -1714,7 +1718,9 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         nameL = list(map(lambda x: str(nameA_p[x].decode()), range(status)))
+        sys.stderr.write("FREEING nameA_p L1721\n")
         LIBC.free(nameA_p)
+        sys.stderr.write("FREED nameA_p L1723\n")
         return nameL
 
     def pmNameID(self, pmid):
@@ -1729,7 +1735,9 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         result = name.value
+        sys.stderr.write("FREEING name L1738\n")
         LIBC.free(name)
+        sys.stderr.write("FREED name L1740\n")
         return str(result.decode())
 
     def pmTraversePMNS(self, name, callback):
@@ -1766,7 +1774,9 @@ class pmContext(object):
         result = LIBPCP.pmRegisterDerivedMetric(name, expr, byref(errmsg))
         if result != 0:
             text = str(errmsg.value.decode())
+            sys.stderr.write("FREEING errmsg L1777\n")
             LIBC.free(errmsg)
+            sys.stderr.write("FREED errmsg L1779\n")
             raise pmErr(c_api.PM_ERR_CONV, text)
         status = LIBPCP.pmReconnectContext(self.ctx)
         if status < 0:
@@ -1865,7 +1875,9 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         result = buf.value
+        sys.stderr.write("FREEING buf L1878\n")
         LIBC.free(buf)
+        sys.stderr.write("FREED buf L1880\n")
         return str(result.decode())
 
     def pmLookupText(self, pmid, kind=c_api.PM_TEXT_ONELINE):
@@ -1880,7 +1892,9 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         text = buf.value
+        sys.stderr.write("FREEING buf L1895\n")
         LIBC.free(buf)
+        sys.stderr.write("FREED buf L1897\n")
         return str(text.decode())
 
     ##
@@ -1906,8 +1920,12 @@ class pmContext(object):
         if status > 0:
             nameL = list(map(lambda x: str(nameA_p[x].decode('ascii', 'ignore')), range(status)))
             instL = list(map(lambda x: int(instA_p[x]), range(status)))
+            sys.stderr.write("FREEING instA_p L1923\n")
             LIBC.free(instA_p)
+            sys.stderr.write("FREED instA_p L1925\n")
+            sys.stderr.write("FREEING nameA_p L1926\n")
             LIBC.free(nameA_p)
+            sys.stderr.write("FREED nameA_p L1928\n")
         else:
             instL = None
             nameL = None
@@ -1957,7 +1975,15 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         result = name_p.value
+        sys.stderr.write("FREEING name_p L1978\n") # THIS ONE IS THE ONE THAT FAILS
+        sys.stderr.write(f"THE VALUE: {result}\n")
+        sys.stderr.write(f"THE VALUE: {result}\n")
+        sys.stderr.write(f"THE VALUE: {result}\n")
+        sys.stderr.write(f"THE POINTER: {name_p}\n")
+        sys.stderr.write(f"THE POINTER: {name_p}\n")
+        sys.stderr.write(f"THE POINTER: {name_p}\n")
         LIBC.free(name_p)
+        sys.stderr.write("FREED name_p L1980\n")
         return str(result.decode('ascii', 'ignore'))
 
     ##
@@ -2329,8 +2355,12 @@ class pmContext(object):
         if status > 0:
             nameL = list(map(lambda x: str(nameA_p[x].decode('ascii', 'ignore')), range(status)))
             instL = list(map(lambda x: int(instA_p[x]), range(status)))
+            sys.stderr.write("FREEING instA_p L2352\n")
             LIBC.free(instA_p)
+            sys.stderr.write("FREED instA_p L2354\n")
+            sys.stderr.write("FREEING nameA_p L2355\n")
             LIBC.free(nameA_p)
+            sys.stderr.write("FREED nameA_p L2357\n")
         else:
             instL = None
             nameL = None
@@ -2365,7 +2395,9 @@ class pmContext(object):
         if status < 0:
             raise pmErr(status)
         result = name_p.value
+        sys.stderr.write("FREEING name_p L2392\n")
         LIBC.free(name_p)
+        sys.stderr.write("FREED name_p L2394\n")
         return str(result.decode('ascii', 'ignore'))
 
     def pmFetchArchive(self):
@@ -2839,7 +2871,9 @@ class pmContext(object):
         status = LIBPCP.pmParseUnitsStr(string, byref(result), byref(multiplier), byref(errmsg))
         if status < 0:
             text = str(errmsg.value.decode())
+            sys.stderr.write("FREEING errmsg L2868\n")
             LIBC.free(errmsg)
+            sys.stderr.write("FREED errmsg L2870\n")
             raise pmErr(status, text)
         return (result, multiplier.value)
 
diff --git a/src/python/pcp/pmda.py b/src/python/pcp/pmda.py
index 70b5a23a8..a094896ff 100644
--- a/src/python/pcp/pmda.py
+++ b/src/python/pcp/pmda.py
@@ -28,12 +28,11 @@ import cpmda
 from pcp.pmapi import pmContext as PCP
 from pcp.pmapi import pmInDom, pmDesc, pmUnits, pmErr, pmLabelSet
 
-from ctypes.util import find_library
 from ctypes import CDLL, c_int, c_long, c_char_p, c_void_p
 from ctypes import addressof, byref, POINTER, Structure
 
 ## Performance Co-Pilot PMDA library (C)
-LIBPCP_PMDA = CDLL(find_library("pcp_pmda"))
+LIBPCP_PMDA = CDLL("@pcp_pmda@")
 
 
 ###
diff --git a/src/python/pcp/pmgui.py b/src/python/pcp/pmgui.py
index c4f58ed0f..0c0bd7b56 100644
--- a/src/python/pcp/pmgui.py
+++ b/src/python/pcp/pmgui.py
@@ -30,7 +30,6 @@ from cpmapi import PM_ERR_IPC
 # for interfacing with libpcp - the client-side C API
 from ctypes import CDLL, Structure, POINTER, cast, byref
 from ctypes import c_void_p, c_char_p, c_int, c_long
-from ctypes.util import find_library
 
 
 ##############################################################################
@@ -38,8 +37,8 @@ from ctypes.util import find_library
 # dynamic library loads
 #
 
-LIBPCP_GUI = CDLL(find_library("pcp_gui"))
-LIBC = CDLL(find_library("c"))
+LIBPCP_GUI = CDLL("@pcp_gui@")
+LIBC = CDLL("@c@")
 
 
 ##############################################################################
diff --git a/src/python/pcp/pmi.py b/src/python/pcp/pmi.py
index c5c56b508..6daeb08c0 100644
--- a/src/python/pcp/pmi.py
+++ b/src/python/pcp/pmi.py
@@ -53,12 +53,11 @@ from pcp.pmapi import pmID, pmInDom, pmUnits, pmHighResResult, pmResult
 from cpmi import pmiErrSymDict, PMI_MAXERRMSGLEN
 from ctypes import c_int, c_uint, c_longlong, c_char_p
 from ctypes import cast, create_string_buffer, POINTER, CDLL
-from ctypes.util import find_library
 from datetime import datetime
 from math import modf
 
 # Performance Co-Pilot PMI library (C)
-LIBPCP_IMPORT = CDLL(find_library("pcp_import"))
+LIBPCP_IMPORT = CDLL("@pcp_import@")
 
 ##
 # PMI Log Import Services
