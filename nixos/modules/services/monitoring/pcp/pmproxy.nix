{ config, pkgs, lib, ... }:

let
  pcpCfg = config.services.pcp;
  cfg = pcpCfg.proxy;

  configSubmodule.options = {
    localOnly = lib.mkOption {
      type = lib.types.bool;
      default = !cfg.openFirewall && cfg.config.listenAddresses == null;
      defaultText = lib.literalExpression ''
        !services.pcp.proxy.openFirewall && services.pcp.proxy.config.listenAddresses == null
      '';
      example = false;
      description = ''
        Whether to restrict `pmproxy` to only listen for incoming connections
        on the local host.
      '';
    };

    maxPendingClientConnections = lib.mkOption {
      type = lib.types.int;
      default = 5;
      example = 10;
      description = ''
        The maximum number of pending client connections at any one time.
      '';
    };

    timeSeries = {
      # TODO
      enable = lib.mkEnableOption "pmproxy timeseries";
    };

    enableAdvertisement = lib.mkOption {
      type = lib.types.bool;
      default = with config.services.avahi; enable && publish.enable;
      defaultText = lib.literalExpression ''
        services.avahi.enable && services.avahi.publish.enable
      '';
      example = true;
      description = ''
        Whether to advertise the presence of `pmproxy` to other devices on the
        network using Avahi.
      '';
    };

    listenPort = lib.mkOption {
      type = lib.types.port;
      default = 44322;
      description = ''
        The TCP port that `pmproxy` should listen on for incoming connections.
      '';
    };

    listenAddresses = lib.mkOption {
      type = with lib.types; nullOr (listOf str);
      default = null;
      defaultText = "(all)";
      example = [ "100.23.45.6" "10.20.30.40" ];
      description = ''
        The IP addresses that `pmproxy` will listen on for incoming
        connections. If set to `null` (default), `pmproxy` will listen on all
        addresses.
      '';
    };
  };

  pmproxyOptions = pkgs.writeText "pmproxy.options" ''
    # This file is generated by Nix. Do not edit!
    # Instead, configure additional command line arguments through the
    # `services.pcp.proxy.extraArguments` NixOS option.

    ${lib.concatLines cfg.extraArguments}
  '';

  pmproxyEnvironment = pkgs.writeText "pmcd" ''
    # This file is generated by Nix. Do not edit!
    # Instead, configure additional environment variables through the
    # `services.pcp.proxy.extraEnvironment` NixOS option.

    ${lib.toShellVars cfg.extraEnvironment}
  '';
in

{
  options.services.pcp.proxy = {
    enable = lib.mkEnableOption ''
      the Performance Metrics Proxy (`pmproxy`) component of PCP
    '';

    openFirewall = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = ''
        Whether to open the specified port in the firewall for `pmproxy`.
      '';
    };

    config = lib.mkOption {
      type = lib.types.submodule configSubmodule;
      default = { };
      description = ''
        Defines the core configuration for `pmproxy`.
      '';
    };

    extraArguments = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [ ];
      description = "Additional command line arguments to pass to `pmproxy`.";
    };

    extraEnvironment = lib.mkOption {
      type = with lib.types; let
        atom = oneOf [ int str bool ];
      in attrsOf (coercedTo atom builtins.toString str);
      default = { };
      description = "Additional environment variables to pass to `pmproxy`.";
    };
  };

  config = lib.mkIf (pcpCfg.enable && cfg.enable) {
    networking.firewall.allowedTCPPorts = lib.mkIf cfg.openFirewall [
      cfg.listenPort
    ];

    systemd.services.pmproxy = {
      enable = true;
      wantedBy = [ "multi-user.target" ];
    };

    services.pcp.proxy.extraEnvironment = with cfg.config; {
      PMPROXY_LOCAL = if localOnly then 1 else 0;
      PMPROXY_MAXPENDING = maxPendingClientConnections;
    };

    environment.etc = {
      # RC script used as part of the systemd service
      "pcp/pmproxy/rc".source = "${pcpCfg.package}/etc/pcp/pmproxy/rc";
      "pcp/pmproxy/pmproxy.options".source = pmproxyOptions;
      "sysconfig/pmproxy".source = pmproxyEnvironment;
    };

    services.pcp.proxy.extraArguments = builtins.concatLists [
      (lib.optional (!cfg.enableAdvertisement) "-A")
      (lib.optional (cfg.listenPort != 44322) "--port=${builtins.toString cfg.listenPort}")
      (lib.optionals (cfg.listenAddresses != null) (lib.map (i: "--interface=${i}") cfg.listenAddresses))
    ];
  };
}
